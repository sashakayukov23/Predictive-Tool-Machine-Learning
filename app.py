# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QGGdgKN_EZJqBFGKcnv9NbuYkwNQwyQY
"""

import streamlit as st
import pandas as pd
import joblib

#Load the trained logistic regression model from file
@st.cache(allow_output_mutation=True)
def load_model():
    return joblib.load("lr4_model.joblib")

# load dataset and prepare values used for dropdown selections
@st.cache
def load_lookup():
    # load & preprocess only to grab the dropdown options
    # drop columns that are not used for prediction; drop_cols can be always changed
    df = pd.read_excel("MKB_final_dataset.xlsx")
    df.columns = df.columns.str.strip()
    drop_cols = ["KvK","Handelsnaam","Status","Education Level",
                 "Contact Person","Number of Followers",
                 "Language","Company Time Investment","Company Industry","Academic Year"]
    df = df.drop(columns=drop_cols, errors="ignore")

    # Group specific institutions under a single label ()
    df["Academic Institution"] = df["Academic Institution"].replace({
        "ROC Amsterdam":"Top-Tier","ROC Flevoland":"Top-Tier",
        "Hotelschool":"Top-Tier","SRH Haarlem University":"Top-Tier"})

    #df["Company Time Investment"] = df["Company Time Investment"].replace({"High":"Medium"}) - can be added if needed

    #applying 20% threshold rule specified in the thesis
    for c in ["Duration","Student Time Investment"]:
        df[c].fillna("Missing", inplace=True)
    return df

model = load_model()
df_lookup = load_lookup()

#title and intructions
st.title("MKB Werkplaats Match Predictor")
st.markdown("Select each scenario below, then hit **Predict** to get your match probability.")

# Create dropdown selectors for model input
col1, col2 = st.columns(2)
col3, col4 = st.columns(2)
col5, _    = st.columns(2)

fte = col1.selectbox("Number of FTE", sorted(df_lookup["Number of FTE"].dropna().unique()))
ctype = col2.selectbox("Challenge Type", sorted(df_lookup["Challenge Type"].dropna().unique()))
sti = col3.selectbox("Student Time Investment", sorted(df_lookup["Student Time Investment"].dropna().unique()))
dur = col4.selectbox("Duration", sorted(df_lookup["Duration"].dropna().unique()))
inst = col5.selectbox("Academic Institution", sorted(df_lookup["Academic Institution"].dropna().astype(str).unique()))



# On button click, prepare input and generate prediction
if st.button("Predict Match Probability"):
    row = pd.DataFrame({
        "Number of FTE":[fte],
        "Challenge Type":[ctype],
        "Student Time Investment":[sti],
        "Duration":[dur],
        "Academic Institution":[inst]
    })
    prob = model.predict_proba(row)[0,1]
    st.success(f"ðŸ”® Predicted definitive match probability: **{prob:.1%}**")